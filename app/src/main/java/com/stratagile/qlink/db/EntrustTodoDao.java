package com.stratagile.qlink.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ENTRUST_TODO".
*/
public class EntrustTodoDao extends AbstractDao<EntrustTodo, Long> {

    public static final String TABLENAME = "ENTRUST_TODO";

    /**
     * Properties of entity EntrustTodo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Account = new Property(1, String.class, "account", false, "ACCOUNT");
        public final static Property Token = new Property(2, String.class, "token", false, "TOKEN");
        public final static Property PairsId = new Property(3, String.class, "pairsId", false, "PAIRS_ID");
        public final static Property Type = new Property(4, String.class, "type", false, "TYPE");
        public final static Property UnitPrice = new Property(5, String.class, "unitPrice", false, "UNIT_PRICE");
        public final static Property TotalAmount = new Property(6, String.class, "totalAmount", false, "TOTAL_AMOUNT");
        public final static Property MinAmount = new Property(7, String.class, "minAmount", false, "MIN_AMOUNT");
        public final static Property MaxAmount = new Property(8, String.class, "maxAmount", false, "MAX_AMOUNT");
        public final static Property QgasAddress = new Property(9, String.class, "qgasAddress", false, "QGAS_ADDRESS");
        public final static Property UsdtAddress = new Property(10, String.class, "usdtAddress", false, "USDT_ADDRESS");
        public final static Property FromAddress = new Property(11, String.class, "fromAddress", false, "FROM_ADDRESS");
        public final static Property Txid = new Property(12, String.class, "txid", false, "TXID");
    }


    public EntrustTodoDao(DaoConfig config) {
        super(config);
    }
    
    public EntrustTodoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ENTRUST_TODO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ACCOUNT\" TEXT," + // 1: account
                "\"TOKEN\" TEXT," + // 2: token
                "\"PAIRS_ID\" TEXT," + // 3: pairsId
                "\"TYPE\" TEXT," + // 4: type
                "\"UNIT_PRICE\" TEXT," + // 5: unitPrice
                "\"TOTAL_AMOUNT\" TEXT," + // 6: totalAmount
                "\"MIN_AMOUNT\" TEXT," + // 7: minAmount
                "\"MAX_AMOUNT\" TEXT," + // 8: maxAmount
                "\"QGAS_ADDRESS\" TEXT," + // 9: qgasAddress
                "\"USDT_ADDRESS\" TEXT," + // 10: usdtAddress
                "\"FROM_ADDRESS\" TEXT," + // 11: fromAddress
                "\"TXID\" TEXT);"); // 12: txid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ENTRUST_TODO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EntrustTodo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(2, account);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(3, token);
        }
 
        String pairsId = entity.getPairsId();
        if (pairsId != null) {
            stmt.bindString(4, pairsId);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        String unitPrice = entity.getUnitPrice();
        if (unitPrice != null) {
            stmt.bindString(6, unitPrice);
        }
 
        String totalAmount = entity.getTotalAmount();
        if (totalAmount != null) {
            stmt.bindString(7, totalAmount);
        }
 
        String minAmount = entity.getMinAmount();
        if (minAmount != null) {
            stmt.bindString(8, minAmount);
        }
 
        String maxAmount = entity.getMaxAmount();
        if (maxAmount != null) {
            stmt.bindString(9, maxAmount);
        }
 
        String qgasAddress = entity.getQgasAddress();
        if (qgasAddress != null) {
            stmt.bindString(10, qgasAddress);
        }
 
        String usdtAddress = entity.getUsdtAddress();
        if (usdtAddress != null) {
            stmt.bindString(11, usdtAddress);
        }
 
        String fromAddress = entity.getFromAddress();
        if (fromAddress != null) {
            stmt.bindString(12, fromAddress);
        }
 
        String txid = entity.getTxid();
        if (txid != null) {
            stmt.bindString(13, txid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EntrustTodo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(2, account);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(3, token);
        }
 
        String pairsId = entity.getPairsId();
        if (pairsId != null) {
            stmt.bindString(4, pairsId);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        String unitPrice = entity.getUnitPrice();
        if (unitPrice != null) {
            stmt.bindString(6, unitPrice);
        }
 
        String totalAmount = entity.getTotalAmount();
        if (totalAmount != null) {
            stmt.bindString(7, totalAmount);
        }
 
        String minAmount = entity.getMinAmount();
        if (minAmount != null) {
            stmt.bindString(8, minAmount);
        }
 
        String maxAmount = entity.getMaxAmount();
        if (maxAmount != null) {
            stmt.bindString(9, maxAmount);
        }
 
        String qgasAddress = entity.getQgasAddress();
        if (qgasAddress != null) {
            stmt.bindString(10, qgasAddress);
        }
 
        String usdtAddress = entity.getUsdtAddress();
        if (usdtAddress != null) {
            stmt.bindString(11, usdtAddress);
        }
 
        String fromAddress = entity.getFromAddress();
        if (fromAddress != null) {
            stmt.bindString(12, fromAddress);
        }
 
        String txid = entity.getTxid();
        if (txid != null) {
            stmt.bindString(13, txid);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public EntrustTodo readEntity(Cursor cursor, int offset) {
        EntrustTodo entity = new EntrustTodo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // account
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // token
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pairsId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // unitPrice
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // totalAmount
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // minAmount
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // maxAmount
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // qgasAddress
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // usdtAddress
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // fromAddress
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // txid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EntrustTodo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAccount(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setToken(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPairsId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUnitPrice(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTotalAmount(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMinAmount(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMaxAmount(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setQgasAddress(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUsdtAddress(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFromAddress(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTxid(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EntrustTodo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EntrustTodo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EntrustTodo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
