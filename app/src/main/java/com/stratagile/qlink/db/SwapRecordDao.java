package com.stratagile.qlink.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SWAP_RECORD".
*/
public class SwapRecordDao extends AbstractDao<SwapRecord, Long> {

    public static final String TABLENAME = "SWAP_RECORD";

    /**
     * Properties of entity SwapRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ROrign = new Property(1, String.class, "rOrign", false, "R_ORIGN");
        public final static Property RHash = new Property(2, String.class, "rHash", false, "R_HASH");
        public final static Property TxHash = new Property(3, String.class, "txHash", false, "TX_HASH");
        public final static Property SwaptxHash = new Property(4, String.class, "swaptxHash", false, "SWAPTX_HASH");
        public final static Property Type = new Property(5, int.class, "type", false, "TYPE");
        public final static Property State = new Property(6, int.class, "state", false, "STATE");
        public final static Property Amount = new Property(7, int.class, "amount", false, "AMOUNT");
        public final static Property LockTime = new Property(8, long.class, "lockTime", false, "LOCK_TIME");
        public final static Property FromAddress = new Property(9, String.class, "fromAddress", false, "FROM_ADDRESS");
        public final static Property ToAddress = new Property(10, String.class, "toAddress", false, "TO_ADDRESS");
        public final static Property WrapperNeoAddress = new Property(11, String.class, "wrapperNeoAddress", false, "WRAPPER_NEO_ADDRESS");
        public final static Property WrpperEthAddress = new Property(12, String.class, "wrpperEthAddress", false, "WRPPER_ETH_ADDRESS");
        public final static Property EthContractAddress = new Property(13, String.class, "ethContractAddress", false, "ETH_CONTRACT_ADDRESS");
        public final static Property NeoContractAddress = new Property(14, String.class, "neoContractAddress", false, "NEO_CONTRACT_ADDRESS");
        public final static Property LockedNep5Height = new Property(15, int.class, "lockedNep5Height", false, "LOCKED_NEP5_HEIGHT");
        public final static Property UnlockedNep5Height = new Property(16, int.class, "unlockedNep5Height", false, "UNLOCKED_NEP5_HEIGHT");
        public final static Property LockedErc20Height = new Property(17, int.class, "lockedErc20Height", false, "LOCKED_ERC20_HEIGHT");
        public final static Property UnlockedErc20Height = new Property(18, int.class, "unlockedErc20Height", false, "UNLOCKED_ERC20_HEIGHT");
        public final static Property NeoTimeout = new Property(19, boolean.class, "neoTimeout", false, "NEO_TIMEOUT");
        public final static Property EthTimeout = new Property(20, boolean.class, "ethTimeout", false, "ETH_TIMEOUT");
        public final static Property Fail = new Property(21, boolean.class, "fail", false, "FAIL");
        public final static Property Remark = new Property(22, String.class, "remark", false, "REMARK");
        public final static Property IsMainNet = new Property(23, boolean.class, "isMainNet", false, "IS_MAIN_NET");
        public final static Property Index = new Property(24, int.class, "index", false, "INDEX");
    }


    public SwapRecordDao(DaoConfig config) {
        super(config);
    }
    
    public SwapRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SWAP_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"R_ORIGN\" TEXT," + // 1: rOrign
                "\"R_HASH\" TEXT," + // 2: rHash
                "\"TX_HASH\" TEXT," + // 3: txHash
                "\"SWAPTX_HASH\" TEXT," + // 4: swaptxHash
                "\"TYPE\" INTEGER NOT NULL ," + // 5: type
                "\"STATE\" INTEGER NOT NULL ," + // 6: state
                "\"AMOUNT\" INTEGER NOT NULL ," + // 7: amount
                "\"LOCK_TIME\" INTEGER NOT NULL ," + // 8: lockTime
                "\"FROM_ADDRESS\" TEXT," + // 9: fromAddress
                "\"TO_ADDRESS\" TEXT," + // 10: toAddress
                "\"WRAPPER_NEO_ADDRESS\" TEXT," + // 11: wrapperNeoAddress
                "\"WRPPER_ETH_ADDRESS\" TEXT," + // 12: wrpperEthAddress
                "\"ETH_CONTRACT_ADDRESS\" TEXT," + // 13: ethContractAddress
                "\"NEO_CONTRACT_ADDRESS\" TEXT," + // 14: neoContractAddress
                "\"LOCKED_NEP5_HEIGHT\" INTEGER NOT NULL ," + // 15: lockedNep5Height
                "\"UNLOCKED_NEP5_HEIGHT\" INTEGER NOT NULL ," + // 16: unlockedNep5Height
                "\"LOCKED_ERC20_HEIGHT\" INTEGER NOT NULL ," + // 17: lockedErc20Height
                "\"UNLOCKED_ERC20_HEIGHT\" INTEGER NOT NULL ," + // 18: unlockedErc20Height
                "\"NEO_TIMEOUT\" INTEGER NOT NULL ," + // 19: neoTimeout
                "\"ETH_TIMEOUT\" INTEGER NOT NULL ," + // 20: ethTimeout
                "\"FAIL\" INTEGER NOT NULL ," + // 21: fail
                "\"REMARK\" TEXT," + // 22: remark
                "\"IS_MAIN_NET\" INTEGER NOT NULL ," + // 23: isMainNet
                "\"INDEX\" INTEGER NOT NULL );"); // 24: index
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SWAP_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SwapRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String rOrign = entity.getROrign();
        if (rOrign != null) {
            stmt.bindString(2, rOrign);
        }
 
        String rHash = entity.getRHash();
        if (rHash != null) {
            stmt.bindString(3, rHash);
        }
 
        String txHash = entity.getTxHash();
        if (txHash != null) {
            stmt.bindString(4, txHash);
        }
 
        String swaptxHash = entity.getSwaptxHash();
        if (swaptxHash != null) {
            stmt.bindString(5, swaptxHash);
        }
        stmt.bindLong(6, entity.getType());
        stmt.bindLong(7, entity.getState());
        stmt.bindLong(8, entity.getAmount());
        stmt.bindLong(9, entity.getLockTime());
 
        String fromAddress = entity.getFromAddress();
        if (fromAddress != null) {
            stmt.bindString(10, fromAddress);
        }
 
        String toAddress = entity.getToAddress();
        if (toAddress != null) {
            stmt.bindString(11, toAddress);
        }
 
        String wrapperNeoAddress = entity.getWrapperNeoAddress();
        if (wrapperNeoAddress != null) {
            stmt.bindString(12, wrapperNeoAddress);
        }
 
        String wrpperEthAddress = entity.getWrpperEthAddress();
        if (wrpperEthAddress != null) {
            stmt.bindString(13, wrpperEthAddress);
        }
 
        String ethContractAddress = entity.getEthContractAddress();
        if (ethContractAddress != null) {
            stmt.bindString(14, ethContractAddress);
        }
 
        String neoContractAddress = entity.getNeoContractAddress();
        if (neoContractAddress != null) {
            stmt.bindString(15, neoContractAddress);
        }
        stmt.bindLong(16, entity.getLockedNep5Height());
        stmt.bindLong(17, entity.getUnlockedNep5Height());
        stmt.bindLong(18, entity.getLockedErc20Height());
        stmt.bindLong(19, entity.getUnlockedErc20Height());
        stmt.bindLong(20, entity.getNeoTimeout() ? 1L: 0L);
        stmt.bindLong(21, entity.getEthTimeout() ? 1L: 0L);
        stmt.bindLong(22, entity.getFail() ? 1L: 0L);
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(23, remark);
        }
        stmt.bindLong(24, entity.getIsMainNet() ? 1L: 0L);
        stmt.bindLong(25, entity.getIndex());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SwapRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String rOrign = entity.getROrign();
        if (rOrign != null) {
            stmt.bindString(2, rOrign);
        }
 
        String rHash = entity.getRHash();
        if (rHash != null) {
            stmt.bindString(3, rHash);
        }
 
        String txHash = entity.getTxHash();
        if (txHash != null) {
            stmt.bindString(4, txHash);
        }
 
        String swaptxHash = entity.getSwaptxHash();
        if (swaptxHash != null) {
            stmt.bindString(5, swaptxHash);
        }
        stmt.bindLong(6, entity.getType());
        stmt.bindLong(7, entity.getState());
        stmt.bindLong(8, entity.getAmount());
        stmt.bindLong(9, entity.getLockTime());
 
        String fromAddress = entity.getFromAddress();
        if (fromAddress != null) {
            stmt.bindString(10, fromAddress);
        }
 
        String toAddress = entity.getToAddress();
        if (toAddress != null) {
            stmt.bindString(11, toAddress);
        }
 
        String wrapperNeoAddress = entity.getWrapperNeoAddress();
        if (wrapperNeoAddress != null) {
            stmt.bindString(12, wrapperNeoAddress);
        }
 
        String wrpperEthAddress = entity.getWrpperEthAddress();
        if (wrpperEthAddress != null) {
            stmt.bindString(13, wrpperEthAddress);
        }
 
        String ethContractAddress = entity.getEthContractAddress();
        if (ethContractAddress != null) {
            stmt.bindString(14, ethContractAddress);
        }
 
        String neoContractAddress = entity.getNeoContractAddress();
        if (neoContractAddress != null) {
            stmt.bindString(15, neoContractAddress);
        }
        stmt.bindLong(16, entity.getLockedNep5Height());
        stmt.bindLong(17, entity.getUnlockedNep5Height());
        stmt.bindLong(18, entity.getLockedErc20Height());
        stmt.bindLong(19, entity.getUnlockedErc20Height());
        stmt.bindLong(20, entity.getNeoTimeout() ? 1L: 0L);
        stmt.bindLong(21, entity.getEthTimeout() ? 1L: 0L);
        stmt.bindLong(22, entity.getFail() ? 1L: 0L);
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(23, remark);
        }
        stmt.bindLong(24, entity.getIsMainNet() ? 1L: 0L);
        stmt.bindLong(25, entity.getIndex());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SwapRecord readEntity(Cursor cursor, int offset) {
        SwapRecord entity = new SwapRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // rOrign
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // rHash
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // txHash
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // swaptxHash
            cursor.getInt(offset + 5), // type
            cursor.getInt(offset + 6), // state
            cursor.getInt(offset + 7), // amount
            cursor.getLong(offset + 8), // lockTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // fromAddress
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // toAddress
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // wrapperNeoAddress
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // wrpperEthAddress
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // ethContractAddress
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // neoContractAddress
            cursor.getInt(offset + 15), // lockedNep5Height
            cursor.getInt(offset + 16), // unlockedNep5Height
            cursor.getInt(offset + 17), // lockedErc20Height
            cursor.getInt(offset + 18), // unlockedErc20Height
            cursor.getShort(offset + 19) != 0, // neoTimeout
            cursor.getShort(offset + 20) != 0, // ethTimeout
            cursor.getShort(offset + 21) != 0, // fail
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // remark
            cursor.getShort(offset + 23) != 0, // isMainNet
            cursor.getInt(offset + 24) // index
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SwapRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setROrign(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRHash(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTxHash(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSwaptxHash(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setType(cursor.getInt(offset + 5));
        entity.setState(cursor.getInt(offset + 6));
        entity.setAmount(cursor.getInt(offset + 7));
        entity.setLockTime(cursor.getLong(offset + 8));
        entity.setFromAddress(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setToAddress(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setWrapperNeoAddress(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setWrpperEthAddress(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setEthContractAddress(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setNeoContractAddress(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setLockedNep5Height(cursor.getInt(offset + 15));
        entity.setUnlockedNep5Height(cursor.getInt(offset + 16));
        entity.setLockedErc20Height(cursor.getInt(offset + 17));
        entity.setUnlockedErc20Height(cursor.getInt(offset + 18));
        entity.setNeoTimeout(cursor.getShort(offset + 19) != 0);
        entity.setEthTimeout(cursor.getShort(offset + 20) != 0);
        entity.setFail(cursor.getShort(offset + 21) != 0);
        entity.setRemark(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setIsMainNet(cursor.getShort(offset + 23) != 0);
        entity.setIndex(cursor.getInt(offset + 24));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SwapRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SwapRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SwapRecord entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
