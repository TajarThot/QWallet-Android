package com.stratagile.qlink.db;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import com.stratagile.qlink.db.VpnEntity;
import com.stratagile.qlink.db.VpnServerRecord;
import com.stratagile.qlink.db.EthWallet;
import com.stratagile.qlink.db.EosAccount;
import com.stratagile.qlink.db.RecordSave;
import com.stratagile.qlink.db.BtcWallet;
import com.stratagile.qlink.db.Wallet;
import com.stratagile.qlink.db.TransactionRecord;

import com.stratagile.qlink.db.VpnEntityDao;
import com.stratagile.qlink.db.VpnServerRecordDao;
import com.stratagile.qlink.db.EthWalletDao;
import com.stratagile.qlink.db.EosAccountDao;
import com.stratagile.qlink.db.RecordSaveDao;
import com.stratagile.qlink.db.BtcWalletDao;
import com.stratagile.qlink.db.WalletDao;
import com.stratagile.qlink.db.TransactionRecordDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig vpnEntityDaoConfig;
    private final DaoConfig vpnServerRecordDaoConfig;
    private final DaoConfig ethWalletDaoConfig;
    private final DaoConfig eosAccountDaoConfig;
    private final DaoConfig recordSaveDaoConfig;
    private final DaoConfig btcWalletDaoConfig;
    private final DaoConfig walletDaoConfig;
    private final DaoConfig transactionRecordDaoConfig;

    private final VpnEntityDao vpnEntityDao;
    private final VpnServerRecordDao vpnServerRecordDao;
    private final EthWalletDao ethWalletDao;
    private final EosAccountDao eosAccountDao;
    private final RecordSaveDao recordSaveDao;
    private final BtcWalletDao btcWalletDao;
    private final WalletDao walletDao;
    private final TransactionRecordDao transactionRecordDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        vpnEntityDaoConfig = daoConfigMap.get(VpnEntityDao.class).clone();
        vpnEntityDaoConfig.initIdentityScope(type);

        vpnServerRecordDaoConfig = daoConfigMap.get(VpnServerRecordDao.class).clone();
        vpnServerRecordDaoConfig.initIdentityScope(type);

        ethWalletDaoConfig = daoConfigMap.get(EthWalletDao.class).clone();
        ethWalletDaoConfig.initIdentityScope(type);

        eosAccountDaoConfig = daoConfigMap.get(EosAccountDao.class).clone();
        eosAccountDaoConfig.initIdentityScope(type);

        recordSaveDaoConfig = daoConfigMap.get(RecordSaveDao.class).clone();
        recordSaveDaoConfig.initIdentityScope(type);

        btcWalletDaoConfig = daoConfigMap.get(BtcWalletDao.class).clone();
        btcWalletDaoConfig.initIdentityScope(type);

        walletDaoConfig = daoConfigMap.get(WalletDao.class).clone();
        walletDaoConfig.initIdentityScope(type);

        transactionRecordDaoConfig = daoConfigMap.get(TransactionRecordDao.class).clone();
        transactionRecordDaoConfig.initIdentityScope(type);

        vpnEntityDao = new VpnEntityDao(vpnEntityDaoConfig, this);
        vpnServerRecordDao = new VpnServerRecordDao(vpnServerRecordDaoConfig, this);
        ethWalletDao = new EthWalletDao(ethWalletDaoConfig, this);
        eosAccountDao = new EosAccountDao(eosAccountDaoConfig, this);
        recordSaveDao = new RecordSaveDao(recordSaveDaoConfig, this);
        btcWalletDao = new BtcWalletDao(btcWalletDaoConfig, this);
        walletDao = new WalletDao(walletDaoConfig, this);
        transactionRecordDao = new TransactionRecordDao(transactionRecordDaoConfig, this);

        registerDao(VpnEntity.class, vpnEntityDao);
        registerDao(VpnServerRecord.class, vpnServerRecordDao);
        registerDao(EthWallet.class, ethWalletDao);
        registerDao(EosAccount.class, eosAccountDao);
        registerDao(RecordSave.class, recordSaveDao);
        registerDao(BtcWallet.class, btcWalletDao);
        registerDao(Wallet.class, walletDao);
        registerDao(TransactionRecord.class, transactionRecordDao);
    }
    
    public void clear() {
        vpnEntityDaoConfig.clearIdentityScope();
        vpnServerRecordDaoConfig.clearIdentityScope();
        ethWalletDaoConfig.clearIdentityScope();
        eosAccountDaoConfig.clearIdentityScope();
        recordSaveDaoConfig.clearIdentityScope();
        btcWalletDaoConfig.clearIdentityScope();
        walletDaoConfig.clearIdentityScope();
        transactionRecordDaoConfig.clearIdentityScope();
    }

    public VpnEntityDao getVpnEntityDao() {
        return vpnEntityDao;
    }

    public VpnServerRecordDao getVpnServerRecordDao() {
        return vpnServerRecordDao;
    }

    public EthWalletDao getEthWalletDao() {
        return ethWalletDao;
    }

    public EosAccountDao getEosAccountDao() {
        return eosAccountDao;
    }

    public RecordSaveDao getRecordSaveDao() {
        return recordSaveDao;
    }

    public BtcWalletDao getBtcWalletDao() {
        return btcWalletDao;
    }

    public WalletDao getWalletDao() {
        return walletDao;
    }

    public TransactionRecordDao getTransactionRecordDao() {
        return transactionRecordDao;
    }

}
