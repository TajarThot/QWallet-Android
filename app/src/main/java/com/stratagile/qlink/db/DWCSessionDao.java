package com.stratagile.qlink.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DWCSESSION".
*/
public class DWCSessionDao extends AbstractDao<DWCSession, Long> {

    public static final String TABLENAME = "DWCSESSION";

    /**
     * Properties of entity DWCSession.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SessionId = new Property(1, String.class, "sessionId", false, "SESSION_ID");
        public final static Property PeerId = new Property(2, String.class, "peerId", false, "PEER_ID");
        public final static Property SessionData = new Property(3, String.class, "sessionData", false, "SESSION_DATA");
        public final static Property RemotePeerData = new Property(4, String.class, "remotePeerData", false, "REMOTE_PEER_DATA");
        public final static Property RemotePeerId = new Property(5, String.class, "remotePeerId", false, "REMOTE_PEER_ID");
        public final static Property UsageCount = new Property(6, int.class, "usageCount", false, "USAGE_COUNT");
        public final static Property LastUsageTime = new Property(7, long.class, "lastUsageTime", false, "LAST_USAGE_TIME");
        public final static Property WalletAccount = new Property(8, String.class, "walletAccount", false, "WALLET_ACCOUNT");
    }


    public DWCSessionDao(DaoConfig config) {
        super(config);
    }
    
    public DWCSessionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DWCSESSION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SESSION_ID\" TEXT," + // 1: sessionId
                "\"PEER_ID\" TEXT," + // 2: peerId
                "\"SESSION_DATA\" TEXT," + // 3: sessionData
                "\"REMOTE_PEER_DATA\" TEXT," + // 4: remotePeerData
                "\"REMOTE_PEER_ID\" TEXT," + // 5: remotePeerId
                "\"USAGE_COUNT\" INTEGER NOT NULL ," + // 6: usageCount
                "\"LAST_USAGE_TIME\" INTEGER NOT NULL ," + // 7: lastUsageTime
                "\"WALLET_ACCOUNT\" TEXT);"); // 8: walletAccount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DWCSESSION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DWCSession entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String sessionId = entity.getSessionId();
        if (sessionId != null) {
            stmt.bindString(2, sessionId);
        }
 
        String peerId = entity.getPeerId();
        if (peerId != null) {
            stmt.bindString(3, peerId);
        }
 
        String sessionData = entity.getSessionData();
        if (sessionData != null) {
            stmt.bindString(4, sessionData);
        }
 
        String remotePeerData = entity.getRemotePeerData();
        if (remotePeerData != null) {
            stmt.bindString(5, remotePeerData);
        }
 
        String remotePeerId = entity.getRemotePeerId();
        if (remotePeerId != null) {
            stmt.bindString(6, remotePeerId);
        }
        stmt.bindLong(7, entity.getUsageCount());
        stmt.bindLong(8, entity.getLastUsageTime());
 
        String walletAccount = entity.getWalletAccount();
        if (walletAccount != null) {
            stmt.bindString(9, walletAccount);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DWCSession entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String sessionId = entity.getSessionId();
        if (sessionId != null) {
            stmt.bindString(2, sessionId);
        }
 
        String peerId = entity.getPeerId();
        if (peerId != null) {
            stmt.bindString(3, peerId);
        }
 
        String sessionData = entity.getSessionData();
        if (sessionData != null) {
            stmt.bindString(4, sessionData);
        }
 
        String remotePeerData = entity.getRemotePeerData();
        if (remotePeerData != null) {
            stmt.bindString(5, remotePeerData);
        }
 
        String remotePeerId = entity.getRemotePeerId();
        if (remotePeerId != null) {
            stmt.bindString(6, remotePeerId);
        }
        stmt.bindLong(7, entity.getUsageCount());
        stmt.bindLong(8, entity.getLastUsageTime());
 
        String walletAccount = entity.getWalletAccount();
        if (walletAccount != null) {
            stmt.bindString(9, walletAccount);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DWCSession readEntity(Cursor cursor, int offset) {
        DWCSession entity = new DWCSession( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sessionId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // peerId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sessionData
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // remotePeerData
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // remotePeerId
            cursor.getInt(offset + 6), // usageCount
            cursor.getLong(offset + 7), // lastUsageTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // walletAccount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DWCSession entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSessionId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPeerId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSessionData(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRemotePeerData(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRemotePeerId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUsageCount(cursor.getInt(offset + 6));
        entity.setLastUsageTime(cursor.getLong(offset + 7));
        entity.setWalletAccount(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DWCSession entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DWCSession entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DWCSession entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
