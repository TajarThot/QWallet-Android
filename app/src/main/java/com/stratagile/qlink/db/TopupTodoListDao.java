package com.stratagile.qlink.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TOPUP_TODO_LIST".
*/
public class TopupTodoListDao extends AbstractDao<TopupTodoList, Long> {

    public static final String TABLENAME = "TOPUP_TODO_LIST";

    /**
     * Properties of entity TopupTodoList.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Account = new Property(1, String.class, "account", false, "ACCOUNT");
        public final static Property P2pId = new Property(2, String.class, "p2pId", false, "P2P_ID");
        public final static Property ProductId = new Property(3, String.class, "productId", false, "PRODUCT_ID");
        public final static Property AreaCode = new Property(4, String.class, "areaCode", false, "AREA_CODE");
        public final static Property PhoneNumber = new Property(5, String.class, "phoneNumber", false, "PHONE_NUMBER");
        public final static Property Amount = new Property(6, String.class, "amount", false, "AMOUNT");
        public final static Property Txid = new Property(7, String.class, "txid", false, "TXID");
        public final static Property PayTokenId = new Property(8, String.class, "payTokenId", false, "PAY_TOKEN_ID");
        public final static Property Created = new Property(9, boolean.class, "created", false, "CREATED");
    }


    public TopupTodoListDao(DaoConfig config) {
        super(config);
    }
    
    public TopupTodoListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TOPUP_TODO_LIST\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ACCOUNT\" TEXT," + // 1: account
                "\"P2P_ID\" TEXT," + // 2: p2pId
                "\"PRODUCT_ID\" TEXT," + // 3: productId
                "\"AREA_CODE\" TEXT," + // 4: areaCode
                "\"PHONE_NUMBER\" TEXT," + // 5: phoneNumber
                "\"AMOUNT\" TEXT," + // 6: amount
                "\"TXID\" TEXT," + // 7: txid
                "\"PAY_TOKEN_ID\" TEXT," + // 8: payTokenId
                "\"CREATED\" INTEGER NOT NULL );"); // 9: created
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TOPUP_TODO_LIST\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TopupTodoList entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(2, account);
        }
 
        String p2pId = entity.getP2pId();
        if (p2pId != null) {
            stmt.bindString(3, p2pId);
        }
 
        String productId = entity.getProductId();
        if (productId != null) {
            stmt.bindString(4, productId);
        }
 
        String areaCode = entity.getAreaCode();
        if (areaCode != null) {
            stmt.bindString(5, areaCode);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(6, phoneNumber);
        }
 
        String amount = entity.getAmount();
        if (amount != null) {
            stmt.bindString(7, amount);
        }
 
        String txid = entity.getTxid();
        if (txid != null) {
            stmt.bindString(8, txid);
        }
 
        String payTokenId = entity.getPayTokenId();
        if (payTokenId != null) {
            stmt.bindString(9, payTokenId);
        }
        stmt.bindLong(10, entity.getCreated() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TopupTodoList entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(2, account);
        }
 
        String p2pId = entity.getP2pId();
        if (p2pId != null) {
            stmt.bindString(3, p2pId);
        }
 
        String productId = entity.getProductId();
        if (productId != null) {
            stmt.bindString(4, productId);
        }
 
        String areaCode = entity.getAreaCode();
        if (areaCode != null) {
            stmt.bindString(5, areaCode);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(6, phoneNumber);
        }
 
        String amount = entity.getAmount();
        if (amount != null) {
            stmt.bindString(7, amount);
        }
 
        String txid = entity.getTxid();
        if (txid != null) {
            stmt.bindString(8, txid);
        }
 
        String payTokenId = entity.getPayTokenId();
        if (payTokenId != null) {
            stmt.bindString(9, payTokenId);
        }
        stmt.bindLong(10, entity.getCreated() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TopupTodoList readEntity(Cursor cursor, int offset) {
        TopupTodoList entity = new TopupTodoList( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // account
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // p2pId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // productId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // areaCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // phoneNumber
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // amount
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // txid
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // payTokenId
            cursor.getShort(offset + 9) != 0 // created
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TopupTodoList entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAccount(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setP2pId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProductId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAreaCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhoneNumber(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAmount(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTxid(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPayTokenId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCreated(cursor.getShort(offset + 9) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TopupTodoList entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TopupTodoList entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TopupTodoList entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
